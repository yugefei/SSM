<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.njue.blackStone.backend.dao.RecordMapper">
    <resultMap id="baseMap" type="Record">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="userNickname" column="user_nickname"/>
        <result property="observationPalName" column="observation_pal_name"/>
        <association property="noteCounts" column="{recordId=id}"
                     select="cn.edu.njue.blackStone.backend.dao.RecordMapper.noteCounts"/>
    </resultMap>

    <resultMap id="recordFullMap" type="Record">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="userNickname" column="user_nickname"/>
        <result property="observationPalName" column="observation_pal_name"/>
        <association property="notes" column="{recordId=id}"
                     select="cn.edu.njue.blackStone.backend.dao.RecordMapper.notesWithRecordId"/>
    </resultMap>
    <resultMap id="noteMap" type="Note">
        <id property="id" column="id"/>
        <result property="remark" column="remark"/>
        <association property="species" column="{species_id=species_id}"
                     select="cn.edu.njue.blackStone.backend.dao.SpeciesMapper.speciesBaseInfo"/>
    </resultMap>
    <resultMap id="noteCountMap" type="NoteCounter">
        <result property="speciesType" column="species_type"/>
        <result property="count" column="type_count"/>
    </resultMap>
    <insert id="insertRecord" parameterType="Record" useGeneratedKeys="true" keyProperty="record.id" keyColumn="id">
        INSERT INTO records (user_id, `time`, lat, lon, observation_pal_name) VALUE (
            #{record.userId}, #{record.time}, #{record.lat}, #{record.lon}, #{record.observationPalName}
        )
    </insert>

    <insert id="insertNote" parameterType="Note">
        INSERT INTO notes (record_id, species_id, remark) VALUE (
            #{note.recordId}, #{note.speciesId}, #{note.remark}
        )
    </insert>
    <select id="noteCounts" resultMap="noteCountMap">
        SELECT
            s.species_type species_type,
            count(1)       type_count
        FROM notes
            LEFT JOIN species s ON s.id = notes.species_id
        WHERE record_id = #{recordId}
        GROUP BY species_type
    </select>
    <select id="recordById" resultMap="recordFullMap" parameterType="Long">
        SELECT
            r.id   id,
            user_id,
            observation_pal_name,
            u.name user_nickname,
            lat,
            lon,
            time
        FROM records r
            LEFT JOIN `user` u ON u.id = r.user_id
        WHERE deleted = 0 AND r.id = #{recordId}
    </select>
    <select id="notesWithRecordId" resultMap="noteMap">
        SELECT
            id,
            species_id,
            remark
        FROM notes
        WHERE record_id = #{recordId}
    </select>


    <select id="userRecord" resultMap="baseMap">
        select
        r.id id,
        user_id,
        `time`,
        observation_pal_name,
        (select count(1) from notes where record_id = r.id) note_count,
        u.name user_nickname
        from records r
        left join `user` u on u.id = r.user_id
        where
        deleted = 0 and r.user_id = #{userId}
        order by `time` desc limit 0,#{count};
    </select>

    <select id="userRecordWithPageControl" resultMap="baseMap">
        select
        r.id id,
        user_id,
        `time`,
        observation_pal_name,
        (select count(1) from notes where record_id = r.id) note_count,
        u.name user_nickname
        from records r
        left join `user` u on u.id = r.user_id
        where
        deleted = 0 and r.user_id = #{userId} and `time` &lt; (select `time` from records where id = #{startId})
        order by `time` desc limit 0,#{count};
    </select>
    <!--<select id="getWorkerByCityId" resultMap="workerMap">-->
    <!--select code,`name`,`level`,photo,user_id,phone,company,id_code,`type` from worker_info where city_id = #{cityId};-->
    <!--</select>-->
    <update id="deleteRecord">
        update records set deleted = 1 WHERE user_id = #{userId} and id = #{recordId}
    </update>

    <delete id="removeNotes">
        delete from notes where record_id = #{recordId}
    </delete>

    <update id="editRecord" parameterType="Record">
        UPDATE records SET
            `time` = #{record.time}
        WHERE id = #{record.id}
    </update>
</mapper>